BEGIN
{
  @sv_ether_proto = 47752;
  @old_sv_counter = 1096;

  @sv_irq_interface_pid = $1;
  @vhost_pid = $2;
  @thyp_threshold = $3;
  @t1 = 0;
}

kprobe:skb_push
{
  $skb = (struct sk_buff*)arg0;
  $protocol = $skb->protocol;
  $sv_counter = 0;

  if ($protocol == @sv_ether_proto) {
    if(pid == @sv_irq_interface_pid){
      @t1 = nsecs(tai);
      $data_sv_counter = $skb->head + $skb->mac_header;
      $data_sv_counter += 51;

      unroll(2) {
        $sv_counter = ($sv_counter << 8) + *(uint8 *)$data_sv_counter;
        $data_sv_counter += 1;
      }

      if($sv_counter != @old_sv_counter){
        @old_sv_counter = $sv_counter;
      }
    }
  }
}

kprobe:consume_skb
{
  $skb = (struct sk_buff*)arg0;
  $protocol = $skb->protocol;
  $sv_counter = 0;

  if ($protocol == @sv_ether_proto) {

      if(pid == @vhost_pid){
        $t2 = nsecs(tai);
        $thyp = ($t2 - @t1)/1000;

        if ($thyp >= @thyp_threshold){
          printf("T1:%llu:T2:%llu: SV %d Thyp %-lluus > %dus in %s (%s pid %d)\n", @t1/1000 ,$t2/1000,
          @old_sv_counter, $thyp, @thyp_threshold, func, comm, pid);
        }
    }
  }

}
